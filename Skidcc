repeat wait() until game:IsLoaded()

if getgenv().kaitun and getgenv().kaitun.loaded then return end

local TaskManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/alienschub/alienhub/refs/heads/main/TaskManagerV3.luau"))()

local manager = TaskManager.new()
manager:register(true, "BalancerPlant", "high")
manager:register(false, "GivePollinateFruit", 80)
manager:register(false, "AutoPlaceEgg", 75)
manager:register(false, "DestroyPlant", 74)
manager:register(false, "PlaceSprinkler", 73)
manager:register(false, "AutoPlanting", 72)
manager:register(false, "OpenSeedPack", 71)
manager:register(false, "AutoSelling", 69)
manager:register(false, "AutoHarvesting", 65)

local VirtualUser = game:GetService('VirtualUser')
game:GetService('Players').LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)


local Player = game:GetService("Players").LocalPlayer
local Players = game:GetService("Players")
local Humanoid = Player.Character:WaitForChild("Humanoid")

local config = getgenv().Config
local cachedPlayerData = nil
local IS_LOADED = false

local settings = {
    ["game"] = {
        ["npcs"] = {
            Eloise = Workspace.NPCS:FindFirstChild("Eloise") and Workspace.NPCS.Eloise:FindFirstChild("HumanoidRootPart") and Workspace.NPCS.Eloise.HumanoidRootPart.Position or nil,
            Raphael = Workspace.NPCS:FindFirstChild("Raphael") and Workspace.NPCS.Raphael:FindFirstChild("HumanoidRootPart") and Workspace.NPCS.Raphael.HumanoidRootPart.Position or nil,
            Sam = Workspace.NPCS:FindFirstChild("Sam") and Workspace.NPCS.Sam:FindFirstChild("HumanoidRootPart") and Workspace.NPCS.Sam.HumanoidRootPart.Position or nil,
            Steven = Workspace.NPCS:FindFirstChild("Steven") and Workspace.NPCS.Steven:FindFirstChild("HumanoidRootPart") and Workspace.NPCS.Steven.HumanoidRootPart.Position or nil,
        },
        ["seeds"] = {
            ["normal"] = {
                "Carrot", "Strawberry",
                "Blueberry", "Orange Tulip",
                "Tomato", "Corn",
                "Daffodil", "Watermelon", "Pumpkin", "Apple", "Bamboo",
                "Coconut", "Cactus", "Dragon Fruit", "Mango",
                "Grape", "Mushroom", "Pepper", "Cacao",
                "Beanstalk"
            },
            ["event"] = {
                "Flower Seed Pack", "Nectarine Seed", "Hive Fruit Seed"
            }
        },
        ["tools"] = {
            ["normal"] = {
                "Watering Can", "Trowel", "Recall Wrench", "Basic Sprinkler", "Advanced Sprinkler", "Godly Sprinkler", "Lightning Rod", "Master Sprinkler", "Favorite Tool"
            },
            ["event"] = {
                "Honey Sprinkler"
            }
        },
        ["eggs"] = {
            ["normal"] = {
                "Common Egg", "Uncommon Egg", "Rare Egg", "Legendary Egg", "Mythical Egg", "Bug Egg"
            },
            ["event"] = {
                "Bee Egg"
            }
        },
        ["cosmetic"] = {
            ["normal"] = {},
            ["event"] = {
                "Honey Crate", "Honey Comb", "Bee Chair", "Honey Torch", "Honey Walkway"
            }
        },
        ["mutations"] = {
            "Gold", "Rainbow", "Shocked", "Wet", "Frozen"
        }
    },
    ["player"] = {
        ["Sheckles"] = nil,
        ["Farm"] = nil,
        ["Place Egg"] = {},
        ["Favorite Fruit"] = {},
        ["Trigger"] = {
            isBuySeeds = false,
            isBuyTools = false,
            isBuyEggs = false,
        },
        isSelling = false
    }
}



local function spawnTaskSafePersistent(name, func)
    task.spawn(function()
        while true do
            local success, err = pcall(func)
            if not success then
                warn("[Task Error: " .. name .. "]", err)
            end
            task.wait(1) -- jeda sebentar sebelum ulang agar tidak loop terlalu cepat saat error
        end
    end)
end

local function teleport(position)
    local Char = Player.Character
    if Char and Char:FindFirstChild("HumanoidRootPart") then
        local adjustedPos = position + Vector3.new(0, 0.5, 0)
        Char.HumanoidRootPart.CFrame = CFrame.new(adjustedPos)
    end
end

local function getFarm()
    for _, farm in ipairs(workspace:WaitForChild("Farm"):GetChildren()) do
        local success, owner = pcall(function()
            return farm:WaitForChild("Important").Data.Owner.Value
        end)
        if success and owner == Player.Name then
            return farm
        end
    end
    return nil
end

local function collectInventory()
    local all = {}
    for _, container in ipairs({Player.Backpack, Player.Character}) do
        if container then
            for _, tool in ipairs(container:GetChildren()) do
                if tool:IsA("Tool") then
                    table.insert(all, tool)
                end
            end
        end
    end
    return all
end

local function searchInventorySeed(item)
    local pattern = "%[x%d+%]$"
    local itemName = item:lower()
    for _, tool in ipairs(collectInventory()) do
        local name = tool.Name:lower()
        if name:find("^" .. itemName) and name:find(pattern) then
            return tool
        end
    end
end

local function removeFirstFruitByName(fruitName)
    local farm = getFarm()

    local plants = farm:WaitForChild("Important"):FindFirstChild("Plants_Physical")
    if plants then
        for _, plant in ipairs(plants:GetChildren()) do
            if plant.Name == fruitName then
                local fruitPart = plant:FindFirstChildWhichIsA("BasePart")
                if fruitPart then
                    game.ReplicatedStorage.GameEvents.Remove_Item:FireServer(fruitPart)
                    return true
                end
            end
        end
    end
    return false
end

local function filterByConfig(category, subcategory)
    local list = settings.game[category]  -- Ambil list dari settings, misal settings.game["seeds"]
    local configKey = "Buy " .. category:sub(1,1):upper() .. category:sub(2)  -- Misal "Buy Seeds"
    local configItems = config[configKey] and config[configKey]["Item"]  -- Ambil config["Buy Seeds"]["Item"]

    if not configItems or type(list) ~= "table" then return end

    if subcategory then
        local newList = {}
        for _, item in ipairs(list[subcategory]) do  -- Loop setiap item dalam subkategori
            if configItems[item] == true then  -- Cek apakah item tersebut diset true di config
                table.insert(newList, item)  -- Jika ya, masukkan ke newList
            end
        end
        settings.game[category][subcategory] = newList  -- Gantikan list lama dengan list yang sudah difilter
    else
        local newList = {}
        for _, item in ipairs(list) do  -- Loop langsung pada list utama
            if configItems[item] == true then  -- Cek apakah item diset true
                table.insert(newList, item)  -- Simpan ke newList
            end
        end
        settings.game[category] = newList  -- Gantikan dengan list baru
    end
end

local function filterEventItems()
    local eventConfig = config["Buy Events"] and config["Buy Events"]["Item"]
    if not eventConfig then return end  -- Jika tidak ada config item event, keluar

    for category, data in pairs(settings.game) do
        if type(data) == "table" and type(data["event"]) == "table" then
            local newList = {}
            for _, item in ipairs(data["event"]) do
                if eventConfig[item] == true then  -- Cek apakah item ini diaktifkan di config
                    table.insert(newList, item)  -- Masukkan ke list baru
                end
            end
            settings.game[category]["event"] = newList  -- Gantikan list event lama dengan hasil filter
        end
    end
end

local function ApplyLowGraphicsMode()
    local Players = game:GetService("Players")
    local Lighting = game:GetService("Lighting")
    local Workspace = game:GetService("Workspace")
    local Terrain = Workspace:FindFirstChildOfClass("Terrain")
    local Player = Players.LocalPlayer

    local function getMyFarm()
        for _, farm in ipairs(Workspace:WaitForChild("Farm"):GetChildren()) do
            local success, owner = pcall(function()
                return farm:WaitForChild("Important").Data.Owner.Value
            end)
            if success and owner == Player.Name then
                return farm
            end
        end
        return nil
    end

    local function destroyOtherFarms()
        local myFarm = getMyFarm()
        for _, farm in ipairs(Workspace:WaitForChild("Farm"):GetChildren()) do
            if farm ~= myFarm then
                farm:Destroy()
            end
        end
    end

    pcall(function()
        sethiddenproperty(Lighting, "Technology", Enum.Technology.Compatibility)
    end)
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 1e10
    Lighting.Brightness = 0
    Lighting.ClockTime = 14
    Lighting.Ambient = Color3.new(1, 1, 1)
    Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
    for _, v in ipairs(Lighting:GetChildren()) do
        if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("BloomEffect") or v:IsA("ColorCorrectionEffect") then
            v:Destroy()
        end
    end

    if Terrain then
        Terrain.WaterWaveSize = 0
        Terrain.WaterWaveSpeed = 0
        Terrain.WaterReflectance = 0
        Terrain.WaterTransparency = 1
    end

    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:IsA("BasePart") then
            obj.Material = Enum.Material.SmoothPlastic
            obj.Reflectance = 0
            obj.CastShadow = false
        elseif obj:IsA("Decal") or obj:IsA("Texture") or obj:IsA("SurfaceGui") then
            obj:Destroy()
        elseif obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Smoke") or obj:IsA("Fire") then
            obj:Destroy()
        elseif obj:IsA("Sound") then
            obj.Volume = 0
        end
    end

    for _, p in ipairs(Players:GetPlayers()) do
        if p.Character then
            for _, item in ipairs(p.Character:GetChildren()) do
                if item:IsA("Accessory") or item:IsA("Shirt") or item:IsA("Pants") or item:IsA("CharacterMesh") then
                    item:Destroy()
                end
            end
        end
    end

    local cam = Workspace:FindFirstChildOfClass("Camera")
    if cam then
        cam.FieldOfView = 50
    end

    pcall(function()
        settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
        settings().Rendering.MeshPartDetailLevel = Enum.MeshPartDetailLevel.Level02
        settings().Rendering.EagerBulkExecution = false
        game:GetService("UserSettings"):GetService("UserGameSettings").SavedQualityLevel = Enum.SavedQualitySetting.QualityLevel1
    end)

    local playerGui = Player:WaitForChild("PlayerGui")
    for _, gui in ipairs(playerGui:GetChildren()) do
        if not gui:IsA("ScreenGui") then
            gui:Destroy()
        end
    end


    Players.PlayerAdded:Connect(function(p)
        p.CharacterAdded:Connect(function(char)
            for _, item in ipairs(char:GetChildren()) do
                if item:IsA("Accessory") or item:IsA("Shirt") or item:IsA("Pants") or item:IsA("CharacterMesh") then
                    item:Destroy()
                end
            end
        end)

        task.delay(2, function()
            for _, farm in ipairs(Workspace:WaitForChild("Farm"):GetChildren()) do
                local success, owner = pcall(function()
                    return farm:WaitForChild("Important").Data.Owner.Value
                end)
                if success and owner ~= Player.Name then
                    farm:Destroy()
                end
            end
        end)
    end)

    task.spawn(destroyOtherFarms)
end

local function optimizeMyFarm()
    local farm = settings["player"]["Farm"]

    for _, obj in ipairs(farm:GetDescendants()) do
        if obj:IsA("BasePart") then
            obj.CanCollide = false
            obj.CastShadow = false
            obj.Reflectance = 0
            obj.Material = Enum.Material.SmoothPlastic
        elseif obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Smoke") or obj:IsA("Fire") then
            obj:Destroy()
        elseif obj:IsA("Decal") or obj:IsA("Texture") or obj:IsA("SurfaceGui") then
            obj:Destroy()
        elseif obj:IsA("Sound") then
            obj.Volume = 0
        end
    end

    farm.DescendantAdded:Connect(function(obj)
        task.defer(function()
            if obj:IsA("BasePart") then
                obj.CanCollide = false
                obj.CastShadow = false
                obj.Reflectance = 0
                obj.Material = Enum.Material.SmoothPlastic
            elseif obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Smoke") or obj:IsA("Fire") then
                obj:Destroy()
            elseif obj:IsA("Decal") or obj:IsA("Texture") or obj:IsA("SurfaceGui") then
                obj:Destroy()
            elseif obj:IsA("Sound") then
                obj.Volume = 0
            end
        end)
    end)
end



getgenv().kaitun = {loaded = true}

task.delay(5, function()
    ApplyLowGraphicsMode()
    optimizeMyFarm()
    IS_LOADED = true
end)

task.spawn(function()
    while task.wait(1) do
        settings['player']["Sheckles"] = Player:WaitForChild("leaderstats").Sheckles.Value
        settings["player"]["Farm"] = getFarm()
    end
end)

filterByConfig("seeds", "normal")
filterByConfig("eggs", "normal")
filterByConfig("tools", "normal")
filterEventItems()

repeat
    task.wait()
until(typeof(settings["player"]["Farm"]) == "Instance" and settings["player"]["Farm"].GetDescendants)

repeat
    task.wait()
until(typeof(settings["player"]["Sheckles"]) == "number")

for _, obj in ipairs(settings["player"]["Farm"]:GetDescendants()) do
    if obj:IsA("BasePart") then
        obj.CanCollide = false
    end
end

local base = settings["player"]["Farm"]:WaitForChild("Important").Plant_Locations.Can_Plant.Position
local points = {}

for i = -2, 2 do
    table.insert(points, {
        Used = false,
        Position = Vector3.new(base.X + (i * 4), base.Y, base.Z - 15)
    })
end

for i = -1, 1 do
    table.insert(points, {
        Used = false,
        Position = Vector3.new(base.X + (i * 4), base.Y, base.Z - 19)
    })
end

settings.player["Place Egg"] = points

task.spawn(function()
    local DataService = require(game:GetService("ReplicatedStorage").Modules.DataService)
    if typeof(DataService.GetData) == "function" then
        local oldGetData = DataService.GetData

        DataService.GetData = function(self, ...)
            local data = oldGetData(self, ...)
            cachedPlayerData = data
            return data
        end
    else
        warn("DataService.GetData bukan fungsi atau belum tersedia.")
    end
end)

spawnTaskSafePersistent("Auto Buy Seeds", function()
    while task.wait(1) do
        if not IS_LOADED then continue end
        if not settings["player"]["Trigger"].isBuySeeds then continue end

        local data = cachedPlayerData
        if not data or not data.SeedStock or not data.SeedStock.Stocks then continue end

        local remote = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):FindFirstChild("BuySeedStock")

        for _, itemName in ipairs(settings.game.seeds.normal) do
            local stockData = data.SeedStock.Stocks[itemName]
            if stockData and stockData.Stock > 0 then
                for _ = 1, stockData.Stock do
                    remote:FireServer(itemName)
                    task.wait()
                end
            end
        end
    end
end)

spawnTaskSafePersistent("Auto Buy Tools", function()
    while task.wait(5) do
        if not IS_LOADED then continue end
        if not settings["player"]["Trigger"].isBuyTools then continue end

        local data = cachedPlayerData
        if not data or not data.GearStock or not data.GearStock.Stocks then continue end

        local remote = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):FindFirstChild("BuyGearStock")

        for _, itemName in ipairs(settings.game.tools.normal) do
            local stockData = data.GearStock.Stocks[itemName]
            if stockData and stockData.Stock > 0 then
                for _ = 1, stockData.Stock do
                    remote:FireServer(itemName)
                    task.wait()
                end
            end
        end
    end
end)

spawnTaskSafePersistent("Auto Buy Eggs", function()
    while task.wait(5) do
        if not IS_LOADED then continue end
        if not settings["player"]["Trigger"].isBuyEggs then continue end

        local data = cachedPlayerData
        if not data or not data.PetEggStock or not data.PetEggStock.Stocks then continue end

        local remote = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuyPetEgg")

        for index, eggData in pairs(data.PetEggStock.Stocks) do
            if eggData and eggData.Stock > 0 then
                for _, name in ipairs(settings.game.eggs.normal) do
                    if eggData.EggName == name then
                        remote:FireServer(index)
                        break
                    end
                end
            end
        end
    end
end)

spawnTaskSafePersistent("Auto Buy Event", function()
    while task.wait(5) do
        if not IS_LOADED then continue end
        if not config["Buy Events"]["Enabled"] then continue end

        local data = cachedPlayerData
        if not data or not data.EventShopStock or not data.EventShopStock.Stocks then continue end

        local remote = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):FindFirstChild("BuyEventShopStock")

        local items = {}
        for _, v in ipairs(settings.game.seeds.event) do table.insert(items, v) end
        for _, v in ipairs(settings.game.tools.event) do table.insert(items, v) end
        for _, v in ipairs(settings.game.eggs.event) do table.insert(items, v) end
        for _, v in ipairs(settings.game.cosmetic.event) do table.insert(items, v) end

        for _, itemName in ipairs(items) do
            local stockData = data.EventShopStock.Stocks[itemName]
            if stockData and stockData.Stock > 0 then
                for _ = 1, stockData.Stock do
                    remote:FireServer(itemName)
                    task.wait()
                end
            end
        end
    end
end)

spawnTaskSafePersistent("Auto Hatch Eggs", function()
    while task.wait(5) do 
        if not IS_LOADED then continue end

        local farm = settings["player"]["Farm"]
        if not farm then continue end

        for _, egg in ipairs(farm:WaitForChild("Important").Objects_Physical:GetChildren()) do
            if egg.Name ~= "PetEgg" then continue end
            local time = egg:GetAttribute("TimeToHatch")
            if time == 0 then
                local args = {"HatchPet", egg}
                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer(unpack(args))
            end
        end
    end
end)

spawnTaskSafePersistent("Watch Sheckles", function()
    while task.wait(5) do 
        if not IS_LOADED then continue end

        local sheckles = settings["player"]["Sheckles"]
        local dontBuyThreshold = config["Dont Buy Seed"]["If Money More Than"]

        if sheckles > dontBuyThreshold then
            for name, _ in pairs(config["Buy Seeds"]["Item"]) do
                for _, dont in ipairs(config["Dont Buy Seed"]["Seed Name"]) do
                    if name == dont then
                        config["Buy Seeds"]["Item"][name] = false
                    end
                end
            end
            filterByConfig("seeds", "normal")
        else
            for name, _ in pairs(config["Buy Seeds"]["Item"]) do
                for _, dont in ipairs(config["Dont Buy Seed"]["Seed Name"]) do
                    if name == dont then
                        config["Buy Seeds"]["Item"][name] = true
                    end
                end
            end
            filterByConfig("seeds", "normal")
        end

        if sheckles > config["Buy Seeds"]["Threshold"] then
            settings["player"]["Trigger"].isBuySeeds = config["Buy Seeds"]["Enabled"]
        else
            settings["player"]["Trigger"].isBuySeeds = false
        end

        if sheckles > config["Buy Tools"]["Threshold"] then
            settings["player"]["Trigger"].isBuyTools = config["Buy Tools"]["Enabled"]
        else
            settings["player"]["Trigger"].isBuyTools = false
        end

        if sheckles > config["Buy Eggs"]["Threshold"] then
            settings["player"]["Trigger"].isBuyEggs = config["Buy Eggs"]["Enabled"]
        else
            settings["player"]["Trigger"].isBuyEggs = false
        end
    end
end)


spawnTaskSafePersistent("Check Inventory", function()
    while task.wait(1) do
        if not IS_LOADED then continue end

        local farm = settings["player"]["Farm"]

        local inventories = collectInventory()
        local pollinated = {}
        local seeds = {}
        local fruits = {}
        local eggs = {}
        local seedPack = {}
        local sprinklers = {}

        if #settings.player["Favorite Fruit"] > 100 then
            table.remove(settings.player["Favorite Fruit"], 1)
        end

        for _, tool in ipairs(inventories) do
            local itemName = tool:GetAttribute("ItemName")
            local itemType = tool:GetAttribute("ItemType")
            local uuid = tool:GetAttribute("ITEM_UUID")
            local isPollinated = tool:GetAttribute("Pollinated")
            local isFavorite = tool:GetAttribute("Favorite")

            if itemType == "Seed" then
                if not (config["Dont Plant Inventory Seed"]["Enabled"] and table.find(config["Dont Plant Inventory Seed"]["Seed Name"], itemName)) then
                    table.insert(seeds, {name = itemName, tool = tool})
                end

            elseif itemType == "Holdable" then
                if farm:WaitForChild("Important").Plants_Physical:FindFirstChild(itemName) then
                    table.insert(fruits, itemName)
                end

                if isPollinated then
                    if not isFavorite then
                        if not table.find(settings.player["Favorite Fruit"], uuid) then
                            table.insert(settings.player["Favorite Fruit"], uuid)
                            game.ReplicatedStorage.GameEvents.Favorite_Item:FireServer(tool)
                            task.wait(0.05)
                        end
                    end

                    table.insert(pollinated, tool)
                end

            elseif itemType == "PetEgg" then
                table.insert(eggs, tool)

            elseif itemType == "Seed Pack" then
                table.insert(seedPack, tool)

            elseif itemType == "Sprinkler" then
                table.insert(sprinklers, {name = itemName, tool = tool})
            end
        end


        if #pollinated > 0 then
            local data = cachedPlayerData

            if data.HoneyMachine.TimeLeft == 0 then
                manager:normal("GivePollinateFruit", function(cachedPlayerData)
                    local data = cachedPlayerData
                    if not data or not data.HoneyMachine then return end

                    for _, tool in ipairs(pollinated) do
                        if data.HoneyMachine.TimeLeft ~= 0 then return end
                        
                        local isFavorite = tool:GetAttribute("Favorite")
                        if isFavorite then
                            game.ReplicatedStorage.GameEvents.Favorite_Item:FireServer(tool)
                            task.wait(0.05)
                        end

                        local currentTool = Player.Character and Player.Character:FindFirstChildOfClass("Tool")
                        if currentTool ~= tool then
                            Player.Character.Humanoid:EquipTool(tool)
                            task.wait(0.5)
                        end

                        game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("HoneyMachineService_RE"):FireServer("MachineInteract")
                        task.wait(0.3)
                        
                    end
                end, {cachedPlayerData}, function() return true end)
            end
        end

        if #seeds > 0 then
            local plants = farm:WaitForChild("Important").Objects_Physical:GetChildren()
            if #plants < 800 then
                manager:normal("AutoPlanting", function()
                    teleport(farm.Center_Point.Position)
                    task.wait(1)

                    for _, seed in ipairs(seeds) do
                        local currentTool = Player.Character and Player.Character:FindFirstChildOfClass("Tool")
                        if currentTool ~= seed.tool then
                            Player.Character.Humanoid:EquipTool(seed.tool)
                            task.wait(2)
                        end

                        for i = 1, seed.tool:GetAttribute("Quantity") do
                            local pos = farm:WaitForChild("Important").Plant_Locations.Can_Plant.Position

                            local offsetX = math.random(-5, 5) / 100
                            local offsetZ = math.random(-5, 5) / 100

                            local args = {
                                [1] = Vector3.new(pos.X + offsetX, pos.Y, pos.Z + offsetZ),
                                [2] = seed.name
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(unpack(args))
                            task.wait(0.2)
                        end
                    end
                end, {}, function() return true end)
            end
        end

        if #fruits > 100 then
            settings.player.isSelling = true

            manager:normal("AutoSelling", function(settings)
                teleport(settings.game.npcs.Steven)
                task.wait(1)

                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
                task.wait(1)

                settings.player.isSelling = false
            end, {settings}, function() return true end)
        end

        if #eggs > 0 then
            local eggPlaced = 0

            for _, entry in ipairs(settings.player["Place Egg"]) do
                entry.Used = false
            end

            for _, egg in ipairs(farm:WaitForChild("Important").Objects_Physical:GetChildren()) do
                if egg.Name == "PetEgg" then
                    eggPlaced = eggPlaced + 1

                    local pos = egg.PetEgg.Position
                    for _, entry in ipairs(settings.player["Place Egg"]) do
                        if not entry.Used then
                            local diffX = math.abs(entry.Position.X - pos.X)
                            local diffZ = math.abs(entry.Position.Z - pos.Z)
                            if diffX <= 1 and diffZ <= 1 then
                                entry.Used = true
                                break
                            end
                        end
                    end
                end
            end

            local data = cachedPlayerData

            local maxEggs = data.PetsData.MutableStats.MaxEggsInFarm
            if eggPlaced < maxEggs then
                manager:normal("AutoPlaceEgg", function()
                    for _, egg in ipairs(eggs) do
                        local currentTool = Player.Character and Player.Character:FindFirstChildOfClass("Tool")
                        if currentTool ~= egg then
                            Player.Character.Humanoid:EquipTool(egg)
                            task.wait(2)
                        end

                        for i = 1, egg:GetAttribute("LocalUses") do
                            local targetPos = nil
                            for _, entry in ipairs(settings.player["Place Egg"]) do
                                if not entry.Used then
                                    targetPos = entry
                                    break
                                end
                            end

                            if not targetPos then return end

                            local args = {
                                [1] = "CreateEgg",
                                [2] = targetPos.Position
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer(unpack(args))

                            targetPos.Used = true

                            eggPlaced = eggPlaced + 1
                            task.wait(1)

                            if eggPlaced >= maxEggs then return end
                        end
                    end
                end, {}, function() return true end)
            end
        end

        if #seedPack > 0 then
            manager:normal("OpenSeedPack", function()
                for _, pack in ipairs(seedPack) do
                    local currentTool = Player.Character and Player.Character:FindFirstChildOfClass("Tool")
                    if currentTool ~= pack then
                        Player.Character.Humanoid:EquipTool(pack)
                        task.wait(2)
                    end

                    for i = 1, pack:GetAttribute("Uses") do
                        pack:Activate()
                        task.wait(1)
                    end
                end
            end, {}, function() return true end)
        end

        if #sprinklers > 0 and config["Use Sprinklers"]["Enabled"] then
            local point = farm:WaitForChild("Important").Plant_Locations.Can_Plant
            local uses = {}
            local planted = {} -- sprinkler yang sudah tertanam di field

            for _, obj in ipairs(farm:WaitForChild("Important").Objects_Physical:GetChildren()) do
                if config["Use Sprinklers"]["Sprinkler"][obj.Name] and obj:FindFirstChild("Root") then
                    local dist = (obj.Root.Position - point.Position).Magnitude
                    if dist <= 2 then
                        planted[obj.Name] = true
                    end
                end
            end

            for _, sprinkler in ipairs(sprinklers) do
                local name = sprinkler.name
                if config["Use Sprinklers"]["Sprinkler"][name] and not planted[name] then
                    uses[name] = sprinkler
                end
            end

            local stack = config["Use Sprinklers"]["Stack"]
            local requireStack = false
            local allStackReady = true

            for name, state in pairs(stack) do
                if state then
                    requireStack = true
                    if not (uses[name] or planted[name]) then
                        allStackReady = false
                        break
                    end
                end
            end

            if not requireStack or allStackReady then
                manager:normal("PlaceSprinkler", function(config)
                    for name, toolData in pairs(uses) do
                        if config["Use Sprinklers"]["Sprinkler"][name] then
                            local currentTool = Player.Character and Player.Character:FindFirstChildOfClass("Tool")
                            if currentTool ~= toolData.tool then
                                Player.Character.Humanoid:EquipTool(toolData.tool)
                                task.wait(2)
                            end

                            local cf = point.CFrame * CFrame.new(0, 0.5, 0)
                            game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("SprinklerService"):FireServer("Create", cf)
                            task.wait(1)
                        end
                    end
                end, {config}, function() return true end)
            end
        end


    end
end)





spawnTaskSafePersistent("Auto Harvesting", function()
    while task.wait(1) do
        if not IS_LOADED then continue end

        local skip = false
        if config["Dont Collect On Weather"]["Enabled"] then
            local workspaceAttr = workspace:GetAttributes()
            for weather, active in pairs(config["Dont Collect On Weather"]["Weather"]) do
                if workspaceAttr[weather] and active then
                    skip = true
                    break
                end
            end
        end

        if skip then continue end

        local isHarvesting = false

        local farm = settings["player"]["Farm"]

        for _, plant in ipairs(farm:WaitForChild("Important").Plants_Physical:GetChildren()) do
            if isHarvesting then break end
            
            for _, descendant in ipairs(plant:GetDescendants()) do

                if descendant:IsA("ProximityPrompt") and descendant.Enabled then
                    isHarvesting = true
                    break
                end
            end
        end

        if isHarvesting then
            manager:normal("AutoHarvesting", function(settings)
                for _, plant in ipairs(settings["player"]["Farm"]:WaitForChild("Important").Plants_Physical:GetChildren()) do
                    for _, descendant in ipairs(plant:GetDescendants()) do
                        if settings.player.isSelling then return end

                        if descendant:IsA("ProximityPrompt") and descendant.Enabled then
                            local part = descendant.Parent
                            if part and part:IsA("BasePart") then
                                teleport(part.Position)
                                task.wait(0.05)
                                fireproximityprompt(descendant)
                                task.wait()
                            end
                        end
                    end
                end

                settings.player.isSelling = true
            end, {settings}, function() return true end)
        end
    end
end)

spawnTaskSafePersistent("Auto Selling", function()
    while task.wait(1) do
        if not IS_LOADED then continue end
        if not settings.player.isSelling then continue end

        manager:normal("AutoSelling", function(settings)
            teleport(settings.game.npcs.Steven)
            task.wait(1)

            game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
            task.wait(1)

            settings.player.isSelling = false
        end, {settings}, function() return true end)
    end
end)

spawnTaskSafePersistent("Auto Remove Plants", function()
    while task.wait(5) do
        if not IS_LOADED then continue end

        local farm = settings["player"]["Farm"]
        local plants = farm and farm:WaitForChild("Important").Plants_Physical:GetChildren() or {}

        local isPlanted = false

        for _, name in ipairs(config["Delete Planted Seed"]["Name Seed Delete"]) do
            if farm:WaitForChild("Important").Plants_Physical:FindFirstChild(name) then
                isPlanted = true
                break
            end
        end

        if isPlanted then
            local shekles = settings["player"]["Sheckles"]
            local selectedSlot = nil
            local maxMin = -math.huge

            for _, slot in ipairs(config["Delete Planted Seed"]["Slot"]) do
                if shekles >= slot.min and slot.min > maxMin then
                    selectedSlot = slot.slot
                    maxMin = slot.min
                end
            end

            local overCount = #plants - selectedSlot

            if overCount > 0 then
                manager:normal("DestroyPlant", function(overCount)
                    local shovel = Player.Backpack:FindFirstChild("Shovel [Destroy Plants]") or Player.Character:FindFirstChild("Shovel [Destroy Plants]")
                    if shovel then Player.Character.Humanoid:EquipTool(shovel) task.wait(1) end

                    for _, name in ipairs(config["Delete Planted Seed"]["Name Seed Delete"]) do
                        if overCount < 1 then break end
                        for i = 1, overCount do 
                            local isDeleted = removeFirstFruitByName(name)
                            if not isDeleted then break end
                            task.wait(0.1)
                            overCount = overCount - 1
                        end
                    end
                end, {overCount}, function() return true end)
            end
        end
    end
end)

spawnTaskSafePersistent("Balancer Plant", function()
    while task.wait(5) do
        if not IS_LOADED then continue end

        local farm = settings["player"]["Farm"]
        local plants = farm and farm:WaitForChild("Important").Plants_Physical:GetChildren() or {}

        if #plants > 750 then
            manager:priority("BalancerPlant", function(settings)
                for _, plant in ipairs(farm:WaitForChild("Important").Plants_Physical:GetChildren()) do
                    for _, descendant in ipairs(plant:GetDescendants()) do
                        if settings.player.isSelling then return end

                        if descendant:IsA("ProximityPrompt") and descendant.Enabled then
                            local part = descendant.Parent
                            if part and part:IsA("BasePart") then
                                teleport(part.Position)
                                task.wait(0.05)
                                fireproximityprompt(descendant)
                                task.wait()
                            end
                        end
                    end
                end

                teleport(settings.game.npcs.Steven)
                task.wait(1)

                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
                task.wait(1)

                local plants = settings["player"]["Farm"].Important.Plants_Physical:GetChildren() or {}

                if #plants > 750 then
                    local plantGroups = {}
                    for _, plant in ipairs(plants) do
                        local name = plant.Name
                        plantGroups[name] = (plantGroups[name] or 0) + 1
                    end

                    local shovel = Player.Backpack:FindFirstChild("Shovel [Destroy Plants]") or Player.Character:FindFirstChild("Shovel [Destroy Plants]")
                    if shovel then Player.Character.Humanoid:EquipTool(shovel) task.wait(1) end

                    for _, name in ipairs(config["Delete Planted Seed"]["Name Seed Delete"]) do
                        local maxDelete = plantGroups[name] or 0

                        for i = 1, maxDelete do
                            local isDeleted = removeFirstFruitByName(name)
                            if not isDeleted then break end
                            task.wait(0.1)
                        end
                    end
                end
            end, {settings}, function() return true end)
        end
    end
end)

if getgenv().Config["Auto Rejoin"]["Enabled"] then
    local function TryRejoin()
        local delayTime = getgenv().Config["Auto Rejoin"]["Delay"] or 5
        task.wait(delayTime)
        TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
    end

    Players.LocalPlayer.OnTeleport:Connect(function(State)
        if State == Enum.TeleportState.Failed or State == Enum.TeleportState.RequestRejected then
            TryRejoin()
        end
    end)

    game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
        if child.Name == "ErrorPrompt" then
            local msg = child:FindFirstChild("MessageArea") and child.MessageArea:FindFirstChild("ErrorFrame") and child.MessageArea.ErrorFrame:FindFirstChild("ErrorMessage")
            if msg and msg.Text then
                TryRejoin()
            end
        end
    end)
end

